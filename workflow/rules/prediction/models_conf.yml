TrainTestSplit:
  random_state: &seed 33
  test_size: 0.1
  shuffle: True

SplitterClass:
  module: sklearn.model_selection
  splitter: StratifiedShuffleSplit
  params:
    n_splits: 5
    random_state: 8

CrossValidation:
  refit: 'balanced_accuracy'
  n_jobs: -1
  return_train_score: True
  verbose: 2

Models:
  LR_l1:
    module: sklearn.linear_model
    model: LogisticRegression
    params:
      n_jobs: -1
      penalty: 'l1'
      class_weight: 'balanced'
      solver: 'liblinear'
    cv:
      max_iter: np.logspace(1, 5, base=10, num=2)
      solver: ['liblinear'] #'saga'
      C: np.logspace(-4, 4, base=10, num=2)

  LR_l2:
    module: sklearn.linear_model
    model: LogisticRegression
    params:
      penalty: 'l2'
      n_jobs: -1
      class_weight: 'balanced'
    cv:
      max_iter: np.logspace(1, 5, base=10, num=2)
      solver: ['newton-cg'] #'sag','lbfgs'
      C: np.logspace(-4, 4, base=10, num=2)

  LR_elasticnet:
    module: sklearn.linear_model
    model: LogisticRegression
    params:
      penalty: 'elasticnet'
      n_jobs: -1
      class_weight: 'balanced'
    cv:
      max_iter: np.logspace(1, 5, base=10, num=5)
      l1_ratio: [0.25, 0.5, 0.75]
      solver: ['saga']
      C: np.logspace(-4, 4, base=10, num=5)

  SVM_l1:
    module: sklearn.svm
    model: LinearSVC
    params:
      penalty: 'l1'
      dual: False
      max_iter: -1
      class_weight: 'balanced'
    cv:
      loss: ['squared_hinge']
      C: np.logspace(-4, 4, base=10, num=5)

  SVM_l2:
    module: sklearn.svm
    model: LinearSVC
    params:
      penalty: 'l2'
      max_iter: -1
      class_weight: 'balanced'
    cv:
      loss: ['squared_hinge','hinge']
      C: np.logspace(-4, 4, base=10, num=5)

  RF:
    module: sklearn.ensemble
    model: RandomForestClassifier
    params:
      n_jobs: -1
      class_weight: 'balanced'
    cv:
      n_estimators: [100, 300, 500, 1000]
      max_depth: [5, 10, 15, 30]
      min_samples_split: [2, 5, 10, 15, 100]
      min_samples_leaf: [1, 2, 5, 10]

  DT:
    module: sklearn.ensemble
    model: DecisionTreeClassifier
  
  ET:
    module: sklearn.ensemble
    model: ExtraTreesClassifier

  ADB:
    module: sklearn.ensemble
    model: AdaBoostClassifier

  GBT:
    module: sklearn.ensemble
    model: GradientBoostingClassifier

  SGD:
    module: sklearn.linear_model
    model: SGDClassifier

  KNN:
    module: sklearn.neighbors
    model: KNeighborsClassifier

  NCC:
    module: sklearn.neighbors
    model: NearestCentroid

  GNB:
    module: sklearn.naive_bayes
    model: GaussianNB
  
  CNB:
    module: sklearn.naive_bayes
    model: ComplementNB
  
  INGOT:
  # need to manually install via 'pip install ingotdr'
    module: ingot
    model: INGOTClassifier
    params:
      false_positive_rate_upper_bound: 0.1
      max_rule_size: 20
      solver_name: 'PULP_CBC_CMD'
      solver_options:
        timeLimit: 1800
    cv:
      lambda_p: [0.01, 0.1, 1, 10, 100]
      lambda_z: [0.01, 0.1, 1, 10, 100]

ModelRegressors:
  ADB:
    module: sklearn.ensemble
    model: AdaBoostRegressor
