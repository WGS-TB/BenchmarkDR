import glob
import getpass
from pathlib import Path
import os
import yaml
import itertools
import pandas as pd

configfile: "workflow/rules/representation/config.yml"

#####################################################
# Read global config  (in addition to local config) #
#####################################################

with open("config.yaml") as file:
    global_config = yaml.load(file, yaml.FullLoader)

path_data = global_config["PATH_DATA"] + "/"
path_output_dir = global_config["OUTPUT_DIR"] + "/"
BACTERIA = global_config["BACTERIA"]


#############################
#                           #
#      UTIL FUNCTIONS       #
#                           #
#############################

###################################################################
# Get Strain (from AllLabels.csv) and Reference IDs (from folder) #
###################################################################

STRAINS_IDS = {}
REFERENCE_IDS = {}

for bacterium in BACTERIA:

    path_label_file = path_data  + "/" + bacterium + "/" + "AllLabels.csv"
    labels_df = pd.read_csv(path_label_file)
    STRAINS_IDS[bacterium] = list(labels_df["id"])

    # reference genomes
    file_reference_fna = glob.glob(path_data + bacterium + "/reference/*.fna")
    if file_reference_fna:
        REFERENCE_IDS[bacterium] = file_reference_fna[0]

    else:
        file_reference_fa = glob.glob(path_data + bacterium + "/reference/*.fa")
        if file_reference_fa:
            REFERENCE_IDS[bacterium] = file_reference_fa[0]


## Function to combine all single files for bacterium to combine in matrix

def get_bacteria_strains(bacterium, representation):
    
    files = list()

    if representation == "kmer":
        path = path_output_dir + "{bacterium}/representation/kmer/{strain_id}.txt"

    if representation == "snps":
        path = path_output_dir + "{bacterium}/representation/snps/{strain_id}.snps"

    if representation == "annotation":
        path = path_output_dir + "{bacterium}/data/annotation/{strain_id}.tsv"

    for bacterium, strain_id in itertools.product([bacterium], STRAINS_IDS[bacterium]):
            files.append(path.format(bacterium=bacterium, strain_id=strain_id))

    return files

## Functions to count bases to determine coverage depth

import re

def count_bases_reference(path_reference):

    base_counter = 0
    pattern = ">"

    with open(path_reference, "r") as file:
        for line in file:
            if not re.search(pattern, line):
                line = line.rstrip('\n')
                base_counter += len(line)

    return base_counter

import gzip

def count_bases_strain(path_strain):

    base_counter = 0
    pattern = "length="

    with gzip.open(path_strain, "r") as file:
        c = 0
        for line in file:
                c += 1
                if (c % 4) == 1:
                    line = str(line).split("\\n")[0]
                    read_length = int(line.split("length=")[1])
                    base_counter += read_length

    return (base_counter * 2)  

## Create mapping for reference genome length

REFERENCE_BASE_COUNT = {}

for bacterium in BACTERIA:

    file_reference_fna = glob.glob(path_data + bacterium + "/reference/*.fna")
    if file_reference_fna:
        base_count = count_bases_reference(file_reference_fna[0])
    
    else:
        file_reference_fa = glob.glob(path_data + bacterium + "/reference/*.fa")
        
        if file_reference_fa:
            base_count = count_bases_reference(file_reference_fa[0])

    REFERENCE_BASE_COUNT[bacterium] = base_count



#############################
#                           #
# Rules for Representations #
#                           #
#############################

###########
###########
## UTILS ##
###########
###########

###################
# Alignment (BAM) #
###################

rule indexing_reference:
    input:
        reference = lambda wildcards: "{reference_path}".format(reference_path = REFERENCE_IDS[wildcards.bacterium])

    output:
        amb_file = path_output_dir + "{bacterium}/reference/index/{bacterium}.amb",
        ann_file = path_output_dir + "{bacterium}/reference/index/{bacterium}.ann",
        bwt_file = path_output_dir + "{bacterium}/reference/index/{bacterium}.bwt",
        pac_file = path_output_dir + "{bacterium}/reference/index/{bacterium}.pac",
        sa_file = path_output_dir + "{bacterium}/reference/index/{bacterium}.sa"

    params:
        reference_folder = lambda wildcards: "{path_output_dir}{bacterium}/reference/index".format(path_output_dir=path_output_dir, bacterium=wildcards.bacterium),
        reference = lambda wildcards: "{path_output_dir}{bacterium}/reference/index/{bacterium}".format(path_output_dir=path_output_dir, bacterium=wildcards.bacterium)

    conda:
        "../../envs/representation/snps.yml"

    shell:
        '''
         mkdir -p {params.reference_folder}
         bwa index -p {params.reference} {input.reference}
        '''

rule fastq_to_bam:
    input:
        read_1 = path_data + "{bacterium}/data/{strain_id}_1.fastq.gz",
        read_2 = path_data + "{bacterium}/data/{strain_id}_2.fastq.gz",
        reference_files = lambda wildcards: expand("{path_output_dir}{bacterium}/reference/index/{bacterium}.{file_type}".format(path_output_dir=path_output_dir, bacterium=wildcards.bacterium, file_type=["amb", "ann", "bwt", "pac", "sa"]))

    output:
        temp(path_output_dir + "{bacterium}/data/alignment/{strain_id}_raw.bam")

    params:
        reference_folder = lambda wildcards: "{path_output_dir}{bacterium}/reference/index/{bacterium}".format(path_output_dir=path_output_dir, bacterium=wildcards.bacterium)

    conda:
        "../../envs/representation/snps.yml"

    shell:
        '''
         bwa mem {params.reference_folder} {input.read_1} {input.read_2} | samtools fixmate - - | samtools sort - -o {output}
        '''

#######################
# Removing Duplicates #
#######################

rule remove_duplicates:
    input:
        path_output_dir + "{bacterium}/data/alignment/{strain_id}_raw.bam"

    output:
        temp(path_output_dir + "{bacterium}/data/alignment/{strain_id}_markduplicates.bam")

    params:
        log = path_output_dir + "{bacterium}/data/alignment/{strain_id}_markduplicates.log",
        tmp_dir = path_output_dir + "{bacterium}/data/alignment"

    conda:
        "../../envs/representation/snps.yml"

    shell:
        '''
        picard MarkDuplicates --REMOVE_DUPLICATES true -I {input} -O {output} --METRICS_FILE {params.log} --TMP_DIR {params.tmp_dir}
        '''


###########
###########
## KMERs ##
###########
###########

#########
# FASTQ #
#########

rule kmer_count_fastq:
    input:
        read_1 = path_data + "{bacterium}/data/{strain_id}_1.fastq.gz",
        read_2 = path_data + "{bacterium}/data/{strain_id}_2.fastq.gz"

    output:
        temp(path_output_dir +
             "{bacterium}/representation/kmer/{strain_id}.intermediate")

    params:
        length = config["kmer_count"]["kmer_length"],
        memory = config["kmer_count"]["memory"],
        min = config["kmer_count"]["min_count"],
        max = config["kmer_count"]["max_count"],
        canonical_form = config["kmer_count"]["canonical_form"],
        tmp_folder = path_output_dir + "{bacterium}/representation/kmer/"

    conda:
        "../../envs/representation/kmer.yml"

    shell:
        """
        file_write="{input.read_1}\n{input.read_2}" 
        echo "$file_write" > {params.tmp_folder}/input_list.lst

        if [ '{params.canonical_form}' = 'True' ]
           then
               kmc -k{params.length} -m{params.memory} -ci{params.min} -cx{params.max} @{params.tmp_folder}/input_list.lst {output} {params.tmp_folder}
               touch {output}
           else
               kmc -b -k{params.length} -m{params.memory} -ci{params.min} -cx{params.max} @{params.tmp_folder}/input_list.lst {output} {params.tmp_folder}
               touch {output}
        fi
        """

#########
# FASTA #
#########

rule kmer_count_fasta:
    input:
        path_data + "{bacterium}/data/{strain_id}.fa"

    output:
        temp(path_output_dir +
             "{bacterium}/representation/kmer/{strain_id}.intermediate")

    params:
        length = config["kmer_count"]["kmer_length"],
        memory = config["kmer_count"]["memory"],
        min = config["kmer_count"]["min_count"],
        max = config["kmer_count"]["max_count"],
        canonical_form = config["kmer_count"]["canonical_form"],
        tmp_folder = path_output_dir + "{bacterium}/representation/kmer/"

    conda:
        "../../envs/representation/kmer.yml"

    shell:
        """
        if [ '{params.canonical_form}' = 'True' ]
           then
               kmc -k{params.length} -m{params.memory} -ci{params.min} -cx{params.max} -fm {input} {output} {params.tmp_folder}
               touch {output}
           else
               kmc -b -k{params.length} -m{params.memory} -ci{params.min} -cx{params.max} -fm {input} {output} {params.tmp_folder}
               touch {output}
        fi
        """

##########
# TO TXT #
##########

rule kmer_count_to_txt:
    input:
        path_output_dir + "{bacterium}/representation/kmer/{strain_id}.intermediate"

    output:
        path_output_dir + "{bacterium}/representation/kmer/{strain_id}.txt"

    conda:
        "../../envs/representation/kmer.yml"

    shell:
        "kmc_dump -s {input} {output}"
        # -s: sorted output

##########################
# TXT TO COMBINED MATRIX #
##########################

rule txt_to_matrix:
    input:
        lambda wildcards: get_bacteria_strains(
            '{bacterium}'.format(bacterium=wildcards.bacterium), "kmer")

    output:
        path_output_dir + "{bacterium}/representation/kmer/0_matrix.csv"

    conda:
        "../../envs/representation/pandas.yml"

    script:
        "../../scripts/representation/txt_to_matrix.py"


##########
##########
## SNPs ##
##########
##########

##################
# BAM to PILEUP  #
##################

rule fastq_to_pileup:
    input:
        bam = path_output_dir + "{bacterium}/data/alignment/{strain_id}_markduplicates.bam",
        reference = lambda wildcards: "{reference_path}".format(reference_path = REFERENCE_IDS[wildcards.bacterium])

    output:
        path_output_dir + "{bacterium}/representation/snps/{strain_id}.pileup"

    conda:
        "../../envs/representation/snps.yml"

    shell:
        '''
        samtools mpileup -f {input.reference} {input.bam} > {output}
        '''

##################
# PILEUP to SNPs #
##################

rule pileup_to_SNP:
    input:
        path_output_dir + "{bacterium}/representation/snps/{strain_id}.pileup"

    output:
        path_output_dir + "{bacterium}/representation/snps/{strain_id}.snps"

    conda:
        "../../envs/representation/snps.yml"

    shell:
        '''
        varscan mpileup2snp {input} > {output}
        '''

##################
# SNPs to MATRIX #
##################

rule snps_to_matrix:
    input:
        lambda wildcards: get_bacteria_strains(
            '{bacterium}'.format(bacterium=wildcards.bacterium), "snps")

    output:
        path_output_dir + "{bacterium}/representation/snps/0_matrix.csv"

    conda:
        "../../envs/representation/pandas.yml"

    script:
        "../../scripts/representation/snps_to_matrix.py"


###########################
###########################
## Gene Presence Absence ##
###########################
###########################

############
# Assembly #
############

rule fastq_to_fasta:
    input:
        read_1 = path_data + "{bacterium}/data/{strain_id}_1.fastq.gz",
        read_2 = path_data + "{bacterium}/data/{strain_id}_2.fastq.gz"

    output:
        file = path_output_dir + "{bacterium}/data/assembly/{strain_id}/scaffolds.fasta",
        directory = directory(path_output_dir + "{bacterium}/data/assembly/{strain_id}")

    priority: 5

    params:
        coverage_depth = lambda wildcards: int(count_bases_strain(path_data + "{bacterium}/data/{strain_id}_1.fastq.gz".format(bacterium=wildcards.bacterium, strain_id=wildcards.strain_id)) / REFERENCE_BASE_COUNT["{bacterium}".format(bacterium=wildcards.bacterium)])

    conda:
        "../../envs/representation/gene_presence_absence.yml"

    shell:
        '''
        if [ {params.coverage_depth} -ge 100 ]
            then
                spades.py --isolate -1 {input.read_1} -2 {input.read_2} -o {output.directory}
            else
                spades.py -1 {input.read_1} -2 {input.read_2} -o {output.directory}
        fi
        '''


###################
# Gene Annotation #
###################

####################
# Reference Genome #
####################


rule fasta_to_gff_reference:
    input:
        reference = lambda wildcards: "{reference_path}".format(reference_path = REFERENCE_IDS[wildcards.bacterium])

    output:
        annotation = path_output_dir + "{bacterium}/reference/annotation/{reference_id}.tsv"

    params:
        directory = directory(path_output_dir + "{bacterium}/reference/annotation"),
        prefix = "{reference_id}"

    conda:
        "../../envs/representation/gene_presence_absence.yml"

    shell:
        '''
        prokka {input} --outdir {params.directory} --force --prefix {params.prefix}
        '''

#################
# Other Genomes #
#################       

rule fasta_to_gff_data:
    input:
        path_output_dir + "{bacterium}/data/assembly/{strain_id}/scaffolds.fasta"

    output:
        annotation = path_output_dir + "{bacterium}/data/annotation/{strain_id}.tsv"

    params:
        directory = directory(path_output_dir + "{bacterium}/data/annotation"),
        prefix = "{strain_id}"

    conda:
        "../../envs/representation/gene_presence_absence.yml"

    shell:
        '''
        prokka {input} --outdir {params.directory} --force --prefix {params.prefix}
        '''

###############################################
# Annotated Files to Presence/ Absence Matrix #
###############################################

rule annotations_to_matrix:
    input:
        strains = lambda wildcards: get_bacteria_strains(
            '{bacterium}'.format(bacterium=wildcards.bacterium), "annotation"),
        reference =  lambda wildcards: "{path_output_dir}{bacterium}/reference/annotation/{reference_id}.tsv".format(path_output_dir=path_output_dir, bacterium=wildcards.bacterium, reference_id = REFERENCE_IDS[wildcards.bacterium])

    output:
        path_output_dir + "{bacterium}/representation/gene_presence_absence/0_matrix.csv"

    conda:
        "../../envs/representation/pandas.yml"

    script:
        "../../scripts/representation/gene_annotation_to_presence_absence_matrix.py"