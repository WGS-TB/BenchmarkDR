import glob
import getpass
from pathlib import Path

configfile: "config.yml"

###########################
# Configure Data Path     #
# (do in config in future)#
###########################


user = getpass.getuser()
path_data = str(Path("/rds/general/user/" + user +
                     "/projects/bacterial_datasets/live/pipeline_data")) + "/"

# specifiy bacteria (will later be done within overall config)
BACTERIA = ["s_pyogenes", "test_bacterium"]

#########################################################
# Get Strain and Reference IDs from Folder (also other script later?) #
# and function to replace expand                        #
#########################################################

STRAINS_IDS = {}
REFERENCE_IDS = {}

for bacterium in BACTERIA:

    # fastq files: reduce file names of paired-end reads to strain ID
    file_list_fastq = glob.glob(path_data + bacterium + "/data/*.fastq")
    if file_list_fastq:

        file_list_fastq = [Path(f).stem for f in file_list_fastq]
        file_list_fastq = list(set([f.split("_")[0] for f in file_list_fastq]))
        STRAINS_IDS[bacterium] = file_list_fastq

    # fasta files
    file_list_fa = glob.glob(path_data + bacterium + "/data/*.fa")
    if file_list_fa:

        if STRAINS_IDS.get(bacterium):
            STRAINS_IDS[bacterium] = STRAINS_IDS[bacterium] + \
                [Path(f).stem for f in file_list_fa]
        else:
            STRAINS_IDS[bacterium] = [Path(f).stem for f in file_list_fa]

    # reference genomes
    file_reference = glob.glob(path_data + bacterium + "/reference/*")
    REFERENCE_IDS[bacterium] = Path(file_reference[0]).stem


# def get_bacteria_strains():
#     files = list()
#     path = path_data + "{bacterium}/representation/kmer/{strain_id}.txt"

#     for bacterium, strains in STRAINS_IDS.items():
#         for strain_id in strains:
#             files.append(path.format(bacterium=bacterium, strain_id=strain_id))
#     return files

# Function to only test for one bacterium
def get_bacteria_strains(bacterium):
    files = list()
    path = path_data + "{bacterium}/representation/kmer/{strain_id}.txt"

    for strain_id in STRAINS_IDS[bacterium]:
        files.append(path.format(bacterium=bacterium, strain_id=strain_id))
    return files


#############################
#                           #
# Rules for Representations #
#                           #
#############################

rule all:
    input: get_bacteria_strains("test_bacterium")

# rule all:
#     input:
#         expand(
#             path_data + "{bacterium}/representation/kmer/0_matrix.csv", bacterium=BACTERIA)

###########
## KMERs ##
###########

#########
# FASTQ #
#########

rule kmer_count_fastq:
    input:
        read_1 = path_data + "{bacterium}/data/{strain_id}_1.fastq",
        read_2 = path_data + "{bacterium}/data/{strain_id}_2.fastq"

    output:
        temp(path_data +
             "{bacterium}/representation/kmer/{strain_id}.intermediate")

    params:
        length = config["kmer_count"]["kmer_length"],
        memory = config["kmer_count"]["memory"],
        min = config["kmer_count"]["min_count"],
        max = config["kmer_count"]["max_count"],
        canonical_form = config["kmer_count"]["canonical_form"],
        tmp_folder = path_data + "{bacterium}/representation/kmer/"

    conda:
        "../../envs/representation/kmer.yml"

    shell:
        """
        file_write="{input.read_1}\n{input.read_2}" 
        echo "$file_write" > {params.tmp_folder}/input_list.lst

        if [ '{params.canonical_form}' = 'True' ]
           then
               kmc -k{params.length} -m{params.memory} -ci{params.min} -cx{params.max} @{params.tmp_folder}/input_list.lst {output} {params.tmp_folder}
               touch {output}
           else
               kmc -b -k{params.length} -m{params.memory} -ci{params.min} -cx{params.max} @{params.tmp_folder}/input_list.lst {output} {params.tmp_folder}
               touch {output}
        fi
        """


#########
# FASTA #
#########

rule kmer_count_fasta:
    input:
        path_data + "{bacterium}/data/{strain_id}.fa"

    output:
        temp(path_data +
             "{bacterium}/representation/kmer/{strain_id}.intermediate")

    params:
        length = config["kmer_count"]["kmer_length"],
        memory = config["kmer_count"]["memory"],
        min = config["kmer_count"]["min_count"],
        max = config["kmer_count"]["max_count"],
        canonical_form = config["kmer_count"]["canonical_form"],
        tmp_folder = path_data + "{bacterium}/representation/kmer/"

    conda:
        "../../envs/representation/kmer.yml"

    shell:
        """
        if [ '{params.canonical_form}' = 'True' ]
           then
               kmc -k{params.length} -m{params.memory} -ci{params.min} -cx{params.max} -fm {input} {output} {params.tmp_folder}
               touch {output}
           else
               kmc -b -k{params.length} -m{params.memory} -ci{params.min} -cx{params.max} -fm {input} {output} {params.tmp_folder}
               touch {output}
        fi
        """


##########
# TO TXT #
##########

rule kmer_count_to_txt:
    input:
        path_data + "{bacterium}/representation/kmer/{strain_id}.intermediate"

    output:
        path_data + "{bacterium}/representation/kmer/{strain_id}.txt"

    conda:
        "../../envs/representation/kmer.yml"

    shell:
        "kmc_dump -s {input} {output}"
        # -s: sorted output


##########################
# TXT TO COMBINED MATRIX #
##########################

rule txt_to_matrix:
    input:
        lambda wildcards: get_bacteria_strains(
            '{bacterium}'.format(bacterium=wildcards.bacterium))

    output:
        path_data + "{bacterium}/representation/kmer/0_matrix.csv"

    conda:
        "../../envs/representation/pandas.yml"

    script:
        "../../scripts/representation/txt_to_matrix.py"


##########
## SNPs ##
##########


# rule fastq_to_SNP:
#     input:
#         read_1 = path_data + "{bacterium}/data/{strain_id}_1.fastq",
#         read_2 = path_data + "{bacterium}/data/{strain_id}_2.fastq",
#         reference = path_data + "{bacterium}/reference/" + REFERENCE_IDS{bacterium}

#     output:
#         path_data + "{bacterium}/representation/kmer/0_matrix.csv"

#     conda:
#         "../../envs/representation/snps.yml"

#     shell:
#         "bwa mem {input.reference} {input.read_1} {input.read_2} | samtools view -S -b | samtools sort -"
